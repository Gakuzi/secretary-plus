import * as Icons from './icons/Icons.js';

// --- EMBEDDED CONTENT ---

const README_CONTENT = `
### üöÄ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
- **üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç:** –†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á.
- **‚òÅÔ∏è –û–±–ª–∞—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:** –•—Ä–∞–Ω–∏—Ç –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ —Ñ–∞–π–ª—ã –≤ Supabase –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–µ–∂–¥—É —Å–µ—Ä–≤–∏—Å–∞–º–∏.
- **üó£Ô∏è –ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–π –≤–≤–æ–¥:** –û–±—â–∞–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é —Ç–µ–∫—Å—Ç–∞, –≥–æ–ª–æ—Å–∞ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
- **üìÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google:** –£–ø—Ä–∞–≤–ª—è–π—Ç–µ Google –ö–∞–ª–µ–Ω–¥–∞—Ä–µ–º, –ö–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –∏ –î–∏—Å–∫–æ–º –ø—Ä—è–º–æ –∏–∑ —á–∞—Ç–∞.
- **üÉè –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏:** –ü–æ–ª—É—á–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –≤–∏–¥–µ –Ω–∞–≥–ª—è–¥–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏.
- **üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:** –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã —Å –ø–æ–º–æ—â—å—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Supabase –∏ –ø–æ–ª–∏—Ç–∏–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å—Ç—Ä–æ–∫ (RLS).
`;

// A simple markdown to HTML converter, duplicated for use in this component.
function markdownToHTML(text) {
    if (!text) return '';
    return text
        .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>') // Bold
        .replace(/\*(.*?)\*/g, '<em>$1</em>')     // Italic
        .replace(/`([^`]+)`/g, '<code class="bg-slate-200 dark:bg-slate-700 text-sm rounded px-1 py-0.5">$1</code>') // Inline code
        .replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank" rel="noopener noreferrer" class="text-blue-500 dark:text-blue-400 hover:underline">$1</a>') // Link
        .replace(/^### (.*$)/gim, '<h3 class="text-lg font-semibold mt-4 mb-2">$1</h3>') // h3
        .replace(/^## (.*$)/gim, '<h2 class="text-xl font-bold mt-4 mb-2">$1</h2>') // h2
        .replace(/^# (.*$)/gim, '<h1 class="text-2xl font-bold mt-4 mb-2">$1</h1>') // h1
        .replace(/^- (.*$)/gim, '<li class="ml-4 list-disc">$1</li>') // li
        .replace(/\n/g, '<br>'); // Newlines
}


export function createHelpModal({ onClose, analyzeErrorFn, onRelaunchWizard, onLaunchDbWizard, onLaunchProxyWizard }) {
    const modalOverlay = document.createElement('div');
    modalOverlay.className = 'fixed inset-0 bg-black/60 flex items-center justify-center z-50 p-0 sm:p-4';
    
    modalOverlay.innerHTML = `
        <div class="bg-white dark:bg-slate-800 w-full h-full flex flex-col sm:h-auto sm:max-h-[90vh] sm:max-w-4xl sm:rounded-lg shadow-xl" id="help-content">
            <header class="flex justify-between items-center p-4 border-b border-slate-200 dark:border-slate-700 flex-shrink-0">
                <h2 class="text-xl sm:text-2xl font-bold flex items-center gap-2">${Icons.QuestionMarkCircleIcon} –¶–µ–Ω—Ç—Ä –ü–æ–º–æ—â–∏</h2>
                <button id="close-help" class="p-2 rounded-full hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors" aria-label="–ó–∞–∫—Ä—ã—Ç—å –ø–æ–º–æ—â—å">&times;</button>
            </header>
            
            <main class="flex-1 flex flex-col sm:flex-row overflow-hidden bg-slate-50 dark:bg-slate-900/70">
                <!-- Mobile Tabs -->
                <nav class="sm:hidden flex-shrink-0 border-b border-slate-200 dark:border-slate-700 p-2 flex items-center justify-around gap-1 text-xs bg-white dark:bg-slate-800">
                    <a href="#instructions" class="settings-tab-button text-center flex-1" data-tab="instructions">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</a>
                    <a href="#error-analysis" class="settings-tab-button text-center flex-1" data-tab="error-analysis">–ê–Ω–∞–ª–∏–∑</a>
                    <a href="#tools" class="settings-tab-button text-center flex-1" data-tab="tools">–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã</a>
                </nav>
                <!-- Desktop Sidebar -->
                <aside class="hidden sm:flex w-52 border-r border-slate-200 dark:border-slate-700 p-4 flex-shrink-0 bg-white dark:bg-slate-800">
                    <nav class="flex flex-col space-y-2 w-full">
                        <a href="#instructions" class="settings-tab-button text-left" data-tab="instructions">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</a>
                        <a href="#error-analysis" class="settings-tab-button active text-left" data-tab="error-analysis">–ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫</a>
                        <a href="#tools" class="settings-tab-button text-left" data-tab="tools">–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã</a>
                    </nav>
                </aside>
                <div class="flex-1 p-4 sm:p-6 overflow-y-auto" id="help-tabs-content">
                    
                    <!-- Error Analysis Tab -->
                    <div id="tab-error-analysis" class="settings-tab-content space-y-6">
                        <div class="p-4 bg-white dark:bg-slate-800/50 rounded-lg border border-slate-200 dark:border-slate-700">
                            <h3 class="text-lg font-semibold text-slate-900 dark:text-slate-200">–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò</h3>
                            <p class="text-sm text-slate-600 dark:text-slate-400 mt-1 mb-4">–°—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å –ø—Ä–æ–±–ª–µ–º–æ–π? –í—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –ø–æ–ª–µ –Ω–∏–∂–µ, –∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –µ—ë, –ø—Ä–µ–¥–ª–æ–∂–∏–≤ —Ä–µ—à–µ–Ω–∏–µ.</p>
                            <div class="space-y-2">
                                <label for="error-input-area" class="block text-sm font-medium text-slate-700 dark:text-slate-300">–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:</label>
                                <textarea id="error-input-area" class="w-full h-32 bg-slate-100 dark:bg-slate-900 border border-slate-300 dark:border-slate-600 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 transition font-mono text-sm" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: Could not find the 'created_time' column of 'files' in the schema cache"></textarea>
                            </div>
                            <div id="error-validation-message" class="text-red-500 text-sm mt-2 h-5"></div>
                            <button id="analyze-error-button" class="mt-2 w-full flex items-center justify-center gap-2 px-4 py-2 bg-blue-600 hover:bg-blue-700 disabled:bg-slate-600 text-white rounded-md font-semibold transition-colors">
                                –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
                            </button>
                        </div>
                        <div id="error-analysis-result" class="p-4 bg-white dark:bg-slate-800/50 rounded-lg border border-slate-200 dark:border-slate-700" style="display: none;">
                            <!-- AI analysis result will be displayed here -->
                        </div>
                    </div>

                    <!-- Instructions Tab -->
                    <div id="tab-instructions" class="settings-tab-content hidden space-y-6">
                        <div class="p-4 bg-white dark:bg-slate-800/50 rounded-lg border border-slate-200 dark:border-slate-700">
                             <h3 class="text-lg font-semibold">–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏</h3>
                             <p class="text-sm text-slate-600 dark:text-slate-400 mt-1 mb-4">–î–ª—è —Ä–∞–±–æ—Ç—ã –æ–±–ª–∞—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã –ë–î –Ω–µ–æ–±—Ö–æ–¥–∏–º "–£–ø—Ä–∞–≤–ª—è—é—â–∏–π –≤–æ—Ä–∫–µ—Ä". –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ú–∞—Å—Ç–µ—Ä –ù–∞—Å—Ç—Ä–æ–π–∫–∏, —á—Ç–æ–±—ã —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ.</p>
                             <button data-action="relaunch-wizard" class="w-full flex items-center justify-center gap-2 px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded-md font-semibold transition-colors">
                                ${Icons.DatabaseIcon}
                                <span>–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ú–∞—Å—Ç–µ—Ä –ù–∞—Å—Ç—Ä–æ–π–∫–∏</span>
                            </button>
                        </div>
                        <div class="p-4 bg-white dark:bg-slate-800/50 rounded-lg border border-slate-200 dark:border-slate-700">
                             <h3 class="text-lg font-semibold">–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ü—Ä–æ–∫—Å–∏-–≤–æ—Ä–∫–µ—Ä–∞</h3>
                             <p class="text-sm text-slate-600 dark:text-slate-400 mt-1 mb-4">–ü—Ä–æ–∫—Å–∏-–≤–æ—Ä–∫–µ—Ä –Ω—É–∂–µ–Ω –¥–ª—è –æ–±—Ö–æ–¥–∞ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Gemini API. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –µ–≥–æ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —à–∞–≥–µ –≤ –ú–∞—Å—Ç–µ—Ä–µ –ù–∞—Å—Ç—Ä–æ–π–∫–∏.</p>
                              <button data-action="relaunch-wizard" class="w-full flex items-center justify-center gap-2 px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded-md font-semibold transition-colors">
                                ${Icons.WandIcon}
                                <span>–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ú–∞—Å—Ç–µ—Ä –ù–∞—Å—Ç—Ä–æ–π–∫–∏</span>
                            </button>
                        </div>
                    </div>

                    <!-- Tools Tab -->
                    <div id="tab-tools" class="settings-tab-content hidden space-y-6">
                         <div class="p-4 bg-white dark:bg-slate-800/50 rounded-lg border border-slate-200 dark:border-slate-700">
                            <h3 class="text-lg font-semibold text-slate-900 dark:text-slate-200">–°–±—Ä–æ—Å –∏ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞</h3>
                            <p class="text-sm text-slate-600 dark:text-slate-400 mt-1 mb-4">
                                –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞ –∏–ª–∏ —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É, –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∞—Å—Ç–µ—Ä.
                            </p>
                            <div class="text-sm p-3 rounded-md bg-yellow-100/50 dark:bg-yellow-900/30 border border-yellow-300 dark:border-yellow-700 text-yellow-800 dark:text-yellow-300 flex items-start gap-3">
                                <div class="w-5 h-5 flex-shrink-0 mt-0.5">${Icons.AlertTriangleIcon}</div>
                                <div>
                                    <p class="font-bold">–í–Ω–∏–º–∞–Ω–∏–µ:</p>
                                    <p>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –≤—Å–µ –≤–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ (–≤–∫–ª—é—á–∞—è API –∫–ª—é—á–∏). –ù–∞—Å—Ç—Ä–æ–π–∫–∏, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å Supabase, –æ—Å—Ç–∞–Ω—É—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.</p>
                                </div>
                            </div>
                            <button data-action="relaunch-wizard" class="mt-4 w-full flex items-center justify-center gap-2 px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-md font-semibold transition-colors">
                                –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ú–∞—Å—Ç–µ—Ä –ù–∞—Å—Ç—Ä–æ–π–∫–∏
                            </button>
                        </div>
                    </div>
                </div>
            </main>
        </div>
    `;

    const handleAction = (e) => {
        const target = e.target.closest('[data-action]');
        if (target) {
            const action = target.dataset.action;
            if (action === 'relaunch-wizard') {
                onRelaunchWizard();
                return;
            }

            if (action === 'analyze-error') {
                const textarea = modalOverlay.querySelector('#error-input-area');
                const validationMsg = modalOverlay.querySelector('#error-validation-message');
                const resultContainer = modalOverlay.querySelector('#error-analysis-result');
                const errorText = textarea.value.trim();

                if (!errorText) {
                    validationMsg.textContent = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Å—Ç–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.';
                    return;
                }
                validationMsg.textContent = '';
                target.disabled = true;
                target.innerHTML = `<div class="animate-spin h-5 w-5 border-2 border-white border-t-transparent rounded-full"></div> <span>–ê–Ω–∞–ª–∏–∑...</span>`;
                resultContainer.style.display = 'block';
                resultContainer.innerHTML = `<div class="flex items-center justify-center h-48"><div class="loading-dots"><div class="dot"></div><div class="dot"></div><div class="dot"></div></div></div>`;
                
                analyzeErrorFn(errorText).then(analysis => {
                    resultContainer.innerHTML = `<div class="prose prose-invert max-w-none text-slate-700 dark:text-slate-300">${markdownToHTML(analysis)}</div>`;
                }).catch(err => {
                    resultContainer.innerHTML = `<p class="text-red-400">–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑: ${err.message}</p>`;
                }).finally(() => {
                    target.disabled = false;
                    target.textContent = '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å';
                });
            }
        }
    };
    
    modalOverlay.addEventListener('click', (e) => {
        if (e.target === modalOverlay || e.target.closest('#close-help')) {
            onClose();
        }

        const tabButton = e.target.closest('.settings-tab-button');
        if (tabButton) {
            e.preventDefault();
            const tabId = tabButton.dataset.tab;

            modalOverlay.querySelectorAll('.settings-tab-button').forEach(btn => btn.classList.remove('active'));
            modalOverlay.querySelectorAll(`.settings-tab-button[data-tab="${tabId}"]`).forEach(btn => btn.classList.add('active'));

            modalOverlay.querySelectorAll('.settings-tab-content').forEach(content => {
                content.classList.toggle('hidden', content.id !== `tab-${tabId}`);
            });
        }

        handleAction(e);
    });
    
    // Default to 'instructions' tab
    const defaultTab = 'instructions';
    modalOverlay.querySelectorAll('.settings-tab-button').forEach(btn => btn.classList.remove('active'));
    modalOverlay.querySelectorAll(`.settings-tab-button[data-tab="${defaultTab}"]`).forEach(btn => btn.classList.add('active'));
    modalOverlay.querySelectorAll('.settings-tab-content').forEach(content => {
        content.classList.toggle('hidden', content.id !== `tab-${defaultTab}`);
    });

    return modalOverlay;
}